                                  ANGULAR


 Basic Building blocks

1)Module - to import 3rd party modules (root module -app.module.ts)
2)component - to create html,css and ts files

Basic commands


1)to create new project - ng new project_name
2)create new component - ng g c component_name
3)to run  angular files - ng serve --open


                                  Basic Concept

1)Data binding - share data btw components

ts->component
html->View

1)one way data binding - data sharing only one direction (ts->html or html->ts)

1.1)component to view (ts->html)
   

   a)String interpolation - {{expression}}
   b)Propery binding - [attribute_name] ="property"

1.2)view to components (html -> ts)

  a)event binding - (event_name) ="faunction_name"  
  b)event binding using $event - (event_name) ="function_name($event)"
  c)event binding using template referencing variable - #variable_name

  2)two way data binding - data sharing both direction(ts->html html->ts)

  1.1)ndModel binding - import formsModule in app.module.ts

  [(ngModel)]="property_name"




2)Angular Routing

To set path for component 


{
   path:value,component:component_name
},

login
{
   path:'',component:LoginComponent
},
  

3)Angular services


to hold redundant data

to create new services - ng g s service_name

4)dependancy injection

to share data btw two dependend classes

constructor(private ds:DataService)

5)Angular Directives -To manipulate DOM

a)component directives(array)

b)structural directives(table)
 ->*ngFor
 ->*ngIf

 6)Angular Forms
 a)Template driven Forms(first design html template)
 b)Model driven Forms(first design model in ts file)

 1)Reactive Forms
 formGroup,array,control
 for advanced validation
 import from Reactive Forms Module(in app.module.ts)

7)local storage
 -setItem - to store data in local storage
 -getItem - to get data from local storage
 -removeItem - to remove data from local storage

 8)Parent child communication

 parent -> child communication
 child -> parent communication

 eg:
 dashboard -> parent
 delete -> child
 